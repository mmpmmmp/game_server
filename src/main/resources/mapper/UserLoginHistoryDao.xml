<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wre.game.api.dao.UserLoginHistoryDao">
    <!-- Result Map-->
    <resultMap id="BaseResultMap" type="com.wre.game.api.data.entity.UserLoginHistory">
        <result column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="uuid" property="uuid"/>
        <result column="channel" property="channel"/>
        <result column="app_id" property="appId"/>
        <result column="app_name" property="appName"/>
        <result column="app_version" property="appVersion"/>
        <result column="login_time" property="loginTime"/>

    </resultMap>

    <resultMap id="RententionResultMap" type="com.wre.game.api.data.entity.UserRetention">
        <result column="date" property="date"/>
        <result column="retentionCount" property="retentionCount"/>
    </resultMap>

    <!-- th_role_user table all fields -->
    <sql id="Base_Column_List">
     id, user_id, uuid, channel, app_id, app_name, app_version, login_time
    </sql>

    <select id="selectNewUserRentention" resultMap="RententionResultMap" parameterType="java.util.HashMap">
        SELECT
            DATE_FORMAT(h1.login_time,'%Y-%m-%d') as `date`,
            COUNT(DISTINCT(h1.user_id)) as retentionCount
        FROM
            user_login_history h1
        LEFT JOIN user u ON h1.user_id = u.user_id
        WHERE
            h1.user_created_at BETWEEN #{startTime} AND #{endTime}
            <if test="appName!=null">
                AND  h1.app_name = #{appName}
            </if>
            <choose>
                <when test="shareType==null">
                    AND u.share_type is null
                </when>
                <when test="shareType!='all'">
                    AND u.share_type = #{shareType}
                </when>
            </choose>

            <choose>
                <when test="shareFromImage==null">
                    AND u.share_from_image is null
                </when>
                <when test="shareFromImage!='all'">
                    AND  u.share_from_image = #{shareFromImage}
                </when>
            </choose>

        GROUP BY
            DATE(login_time)
        LIMIT 31
    </select>

    <select id="selectActiveUserRentention" resultMap="RententionResultMap" parameterType="java.util.HashMap">

        SELECT
            DATE_FORMAT(h2.login_time,'%Y-%m-%d') as `date`,
            COUNT(DISTINCT(h2.user_id)) as retentionCount

        FROM
            user_login_history h1 INNER JOIN user_login_history h2 ON h1.user_id = h2.user_id
            LEFT JOIN user u ON h2.user_id = u.user_id
        WHERE
            h1.login_time BETWEEN #{startTime} AND  #{endTime}
            AND
            h2.login_time >= #{startTime}
        <if test="appName!=null">
            AND  h2.app_name = #{appName} AND  h1.app_name = #{appName}
        </if>
        <choose>
            <when test="shareType==null">
                AND u.share_type is null
            </when>
            <when test="shareType!='all'">
                AND u.share_type = #{shareType}
            </when>
        </choose>
        <choose>
            <when test="shareFromImage==null">
                AND u.share_from_image is null
            </when>
            <when test="shareFromImage!='all'">
                AND  u.share_from_image = #{shareFromImage}
            </when>
        </choose>
            GROUP BY DATE(h2.login_time)
        LIMIT 31
    </select>


    <insert id="insertUserLoginHistory" parameterType="com.wre.game.api.data.entity.UserLoginHistory"
            useGeneratedKeys="true"
            keyProperty="id">
        <selectKey resultType="long" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into `user_login_history` (user_id, uuid, channel, app_id, app_name, app_version, new_user_yn, user_created_at, login_time)
        values (#{userId}, #{uuid}, #{channel}, #{appId}, #{appName}, #{appVersion}, #{newUserYn}, #{userCreatedAt}, #{loginTime});
    </insert>


    <insert id="backupUserLoginHistory" parameterType="java.util.HashMap">
        create table if not exists `${newTableName}`
         as
        select * from  `user_login_history`
        <if test="startTime!=null and endTime!=null">
            where login_time between #{startTime} and #{endTime}
        </if>
    </insert>

    <delete id="deleteUserLoginHistoryBefore" parameterType="java.util.HashMap">
        <if test="loginTime!=null">
            <![CDATA[
            delete from `user_login_history` where login_time < #{loginTime}
            ]]>
        </if>
    </delete>

    <select id="selectActiveCount" resultType="java.lang.Integer">
        select
            COUNT(DISTINCT(h.user_id))
        from `user_login_history` h
        LEFT JOIN user u ON h.user_id = u.user_id
        where
            h.login_time between #{startTime} and #{endTime}
        <if test="appName!=null">
            AND  h.app_name = #{appName}
        </if>
        <choose>
            <when test="shareType==null">
                AND u.share_type is null
            </when>
            <when test="shareType!='all'">
                AND u.share_type = #{shareType}
            </when>
        </choose>
        <choose>
            <when test="shareFromImage==null">
                AND u.share_from_image is null
            </when>
            <when test="shareFromImage!='all'">
                AND  u.share_from_image = #{shareFromImage}
            </when>
        </choose>
    </select>
</mapper>